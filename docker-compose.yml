version: '3'

services:
  # Database
  db:
    hostname: db
    image: postgres:9.6-alpine
    restart: always
    env_file: .env
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

  # Redis
  redis:
    hostname: redis
    restart: always
    env_file: .env
    image: redis:alpine3.12
    command: "redis-server --requirepass $REDIS_PASSWORD"
    networks:
      - webnet

  # Elastic Search
  elasticsearch:
    hostname: elasticsearch
    image: elasticsearch:7.7.0
    restart: always
    environment:
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./es-data:/usr/share/elasticsearch/data
    networks:
      - webnet

  # Django application
  app:
    image: swartz
    build:
      context: ./django/
      dockerfile: Dockerfile
    restart: always
    # Check django/scripts/README.md for wait-for-it.sh
    command: ['./scripts/wait-for-it.sh', './scripts/run_app_development.sh']
    volumes:
      - ./django/scripts:/scripts
      - ./django/swartz:/code/swartz
      - ./static:/static
      - ./media:/media
      - ./logs:/logs
    depends_on:
      - db
      - redis
      - elasticsearch
    env_file: .env
    environment:
      PYTHONUNBUFFERED: 1
      WAIT_FOR: db:5432,redis:6379
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == worker]
    networks:
      - webnet

  queue:
    image: swartz
    restart: always
    # Check django/scripts/README.md for wait-for-it.sh
    command: ['./scripts/wait-for-it.sh', './scripts/run_app_celery_dev.sh']
    volumes:
      - ./django/scripts:/scripts
      - ./django/app:/code/app
    depends_on:
      - db
      - redis
    env_file: .env
    environment:
      WAIT_FOR: db:5432,redis:6379
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - webnet

  # Nginx Server
  nginx:
    restart: always
    image: nginx:1.15.5-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/usr/share/nginx/html/static
      - ./media:/usr/share/nginx/html/media
    depends_on:
      - app
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints: [node.role == worker]
    networks:
      - webnet

networks:
  webnet:

volumes:
  static:
